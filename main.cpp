#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
using namespace std;

int stringToInt(char []);
int nextInt();
int nextRand(int,int);
int recRodCut(int*,int,int);
int pvTopDownRecRodCut(int*,int,int n,int*);
int topDownRecRodCut(int*,int,int);
int bottomUpRodCut(int*,int,int);

int main(){
	int number;
	int *p;
	system("clear");
	printf("Do you want Price Table Generated By Random (Enter 1 To Yes): ");
	if(nextInt()==1){
		printf("\nEnter Price Table Length (Values Generated By Random): ");
		number=nextInt();
		number++;
		p=new int[number];
		p[0]=0;
		for(int i=1; number>i; i++) p[i]=p[i-1]+nextRand(0,4);
	}
	else{
		number=16;
		p=new int[16];
		p[0]=0; p[1]=3; p[2]=4; p[3]=6; p[4]=9; p[5]=11;
		p[6]=15; p[7]=18; p[8]=21; p[9]=24; p[10]=28; p[11]=31;
		p[12]=33; p[13]=37; p[14]=38; p[15]=43;
	}

	cout<<endl;
	for(int i=0; number>i; i++) printf("%d: %d\n", i,p[i]);

	printf("\nEnter Rod Length: ");
	int rodLength=nextInt();
	printf("\nnot Dynamic rodCut Func Measure Optimum Price (Enter 1 To Yes): ");
	bool noDyn=(nextInt()==1);
	
	printf("\nTop Down rodCut Func Measure Optimum Price (Enter 1 To Yes): ");
	bool topDown=(nextInt()==1);
	printf("----------------------------------------");
        
        
	cout<<endl<<endl;
	printf("Price Table Length: %d\n",number-1);
	printf("Rod Length: %d\n\n",rodLength);
	long startTime=time(NULL);
        
	printf("Optimum Price (Bottpm Up): %d\n", bottomUpRodCut(p,number,rodLength));
	printf("Time: %lds\n\n", time(NULL)-startTime);
	startTime=time(NULL);
	
	if(topDown){
		printf("Optimum Price (Top Down): %d\n", topDownRecRodCut(p,number,rodLength));
		printf("Time: %lds\n\n", time(NULL)-startTime);
		startTime=time(NULL);
	}
        
	if(noDyn){
		printf("Optimum Price (recRodCut): %d\n", recRodCut(p,number,rodLength));
		printf("Time: %lds\n\n", time(NULL)-startTime);
		startTime=time(NULL);
	}
}

int stringToInt(char a[]){
    int t,out=0,zarb=1,r;
    int first;
    if(a[0]=='-') first=1;
    else first=0;
    if(a[first]==0) return INT_MAX;
    for (t=0; a[t]; t++);
    
    for (int i=first; t>i; i++){
		if(a[i]>57 || a[i]<48){
            return INT_MAX;
		}
    }
    
    if(t-first>9) return INT_MAX-1;
    for (int i=first; t-1>i; i++) zarb=zarb*10;
    for (int i=first; t>i; i++){
		r= a[i]-48;
		out=out+r*zarb;
		zarb=zarb/10;
    }
    
    if(first==1) out=-(out);
    return out;
}

int nextInt(){
    char numch[60];
    cin>>numch;
    cin.ignore();
    int out=stringToInt(numch);
    return out;
}

int nextRand(int min, int max){
	return (min + (rand() % (int)(max - min + 1)));
}
    
int recRodCut(int *pr,int prLength,int n){
	if(n<=1) return pr[n];
        
	int max=-1;
	for(int k=1; n>k && prLength>k; k++){
		int value=pr[k]+recRodCut(pr,prLength, n-k);
		if(value>max) max=value;
	}
	return max;
}
    
int pvTopDownRecRodCut(int *pr,int prLength,int n,int op[]){
	if(n<=1) return pr[n];
	if(op[n]>0) return op[n];
        
	int max=-1;
	for(int k=1; n>k && prLength>k; k++){
		int value=pr[k]+pvTopDownRecRodCut(pr,prLength, n-k,op);
		if(value>max) max=value;
	}
	op[n]=max;
	return max;
}
    
int topDownRecRodCut(int *pr,int prLength,int n){
	int *o=new int[n+1];
	for(int i=0; n>i; i++) o[i]=0;
	return pvTopDownRecRodCut(pr,prLength, n, o);
}
    
int bottomUpRodCut(int *pr,int prLength, int n){
	int *op=new int [n+1];
	for(int i=0; 2>i; i++) op[i]=pr[i];
	for(int i=2; n+1>i; i++) op[i]=0;
        
	for(int q=2; n>=q; q++){
		int max=-1;
		for(int k=1; q>k && prLength>k; k++){
			int value=pr[k]+op[q-k];
			if(value>max) max=value;
		}
		op[q]=max;
	}
	return op[n];
}

